@page "/AddUser/{UserId}"
@inject UserService _userService;
@inject NavigationManager _navigationManager;

<h3>Add User</h3>
<EditForm Model="@User" OnValidSubmit="@AddUserAsync">
    <UserFields User="@User"></UserFields>
    <button type="submit" class="btn btn-success">
        <span class="oi oi-pencil"></span>
        Add User
    </button>
    <button type="button" class="btn btn-secondary" @onclick="Close">
        <span class="oi oi-media-skip-backward"></span>
        Close
    </button>
</EditForm>

<NotificationDialog @ref="NotificationDialog" Description="@ConcatenatedValidationErrors" NotificationType="Error"></NotificationDialog>
@code {
    public User User { get; set; }
    public User UserCheck { get; set; }
    public NotificationDialog NotificationDialog { get; set; }
    public List<ValidationError> ValidationErrors { get; set; }
    public String ConcatenatedValidationErrors { get; set; }
    [Parameter]
    public string UserId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        User = new User();
    }


    private async Task AddUserAsync()
    {
        try
        {
            UserCheck = await _userService.GetUserAsync(User.Username);
        }
        catch(System.Exception)
        {

        }

        ValidationErrors = ValidateUser();

        if (UserCheck.Username == User.Username)
        {
            ValidationErrors.Add(new ValidationError { Description = "Account with that username already exists" });
        }

        if (ValidationErrors.Any())
        {
            ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
            NotificationDialog.Show();
        }
        else
        {
            await _userService.AddUserAsync(User);
            Close();
        }
    }

    private void Close()
    {
        _navigationManager.NavigateTo($"/ProfilePage/{UserId}");
    }

    private List<ValidationError> ValidateUser()
    {
        var validationErrors = new List<ValidationError>();
        if (String.IsNullOrWhiteSpace(User.Username))
            validationErrors.Add(new ValidationError { Description = "Please enter a Username!" });

        if (String.IsNullOrWhiteSpace(User.Password))
            validationErrors.Add(new ValidationError { Description = "Please enter a Password!" });

        if ((int) User.Role != 1 && (int) User.Role != 2)
            validationErrors.Add(new ValidationError { Description = "Please select a Role!" });

        return validationErrors;

    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach (var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");

        }
        return message.ToString();
    }
}
