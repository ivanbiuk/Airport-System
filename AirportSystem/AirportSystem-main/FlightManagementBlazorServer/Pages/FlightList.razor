@page "/FlightList/{UserId}"
@using FlightManagementBlazorServer.Services
@inject FlightService _flightService;
@inject NavigationManager _navigationManager;
@inject UserService _userService;
@inherits PassengerListBase;

<div style="text-align: right;">
    <button type="button" class="btn btn-secondary" @onclick="OpenProfilePage">
        <span class="oi oi-media-skip-backward"></span>
        Close
    </button>
</div>

<h3>Flights</h3>

@if (IsAdmin(User))
{
    <button type="button" class="btn btn-success" @onclick="OpenAddFlightPage"> 
        <span class="oi oi-plus"></span>
        Add Flight
    </button>
}



@if (Flights == null)
{
    <div>Loading...</div>
 }
else
{
<table class="table table-responsive">
    <thead>
        <tr>
            <th>Number</th>
            <th>Date</th>
            <th>Time</th>
            <th>Carrier</th>
            <th>Airport to</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var flight in Flights)
        {
<tr>
    <td>@flight.Number</td>
    <td>@flight.FlightDate.ToString("dd.MM.yyyy")</td>
    <td>@flight.FlightTime</td>
    <td>@flight.Carrier?.Name</td>
    <td>@flight.AirportTo</td>
    <td>
        @if (IsAdmin(User))
        {
    <button type="button" class="btn btn-primary" @onclick="() => EditFlight(flight.Id)">
        <span class="oi oi-pencil"></span>
    </button>}
        &nbsp;
        @if (IsAdmin(User))
        {
    <button type="button" class="btn btn-danger" @onclick="() => DeleteFlight(flight.Id)">
        <span class="oi oi-delete"></span>
    </button>}
        &nbsp;
        @if (IsAdmin(User))
        {
    <button type="button" class="btn btn-secondary" @onclick="() => ArchiveFlight(flight.Id)">
        <span class="oi oi-transfer"></span>
    </button>}
        &nbsp;
        @if (IsAdmin(User))
        {
    <button type="button" class="btn btn-success" @onclick="() => OpenAddPassengerPage(flight.Id, int.Parse(UserId))">
        <span class="oi oi-plus"></span>
        Add Passenger
    </button>}
        &nbsp;
        <button type="button" class="btn btn-success" @onclick="() => OpenPassengerListPage(flight.Id, int.Parse(UserId))">
            <span class="oi oi-people"></span>
            View All Passengers
        </button>
        &nbsp;
        <button type="button" class="btn btn-success" @onclick="() => OpenCheckedInPassengersListPage(flight.Id, int.Parse(UserId))">
            <span class="oi oi-people"></span>
            Checked In Passengers
        </button>
    </td>
</tr>}

    </tbody>
</table>}

<ConfirmationDialog @ref="DeleteConfirmationDialog" ConfirmationChanged="@OnDeleteConfirmationSelected" Question="Delete flight?"></ConfirmationDialog>
<ConfirmationDialog @ref="ArchiveConfirmationDialog" ConfirmationChanged="@OnArchiveConfirmationSelected" Question="Archive flight?"></ConfirmationDialog>

@code
{ private List<Flight> Flights;
    public ConfirmationDialog DeleteConfirmationDialog { get; set; }
    public ConfirmationDialog ArchiveConfirmationDialog { get; set; }
    public int SelectedFlightId { get; set; }
    [Parameter]
    public string UserId { get; set; }
    public User User { get; set; }
    protected override async Task OnInitializedAsync()
    {
        User = new User();
        Flights = await _flightService.GetFlights();
        User = await _userService.GetUserAsync(int.Parse(UserId));
    }

    private void OpenAddFlightPage()
    {
        _navigationManager.NavigateTo($"/AddFlight/{UserId}");
    }

    private async Task EditFlight(int flightId)
    {
        _navigationManager.NavigateTo($"/EditFlight/{flightId}/{UserId}");
    }

    private async Task DeleteFlight(int flightId)
    {
        SelectedFlightId = flightId;
        DeleteConfirmationDialog.Show();
    }

    private async Task OnDeleteConfirmationSelected(bool isDeleteConfirmed)
    {
        if (isDeleteConfirmed)
        {
            await _flightService.DeleteFlight(SelectedFlightId);
            Flights = await _flightService.GetFlights();
        }
    }

    private async Task OnArchiveConfirmationSelected(bool isArchiveConfirmed)
    {
        if (isArchiveConfirmed)
        {
            await _flightService.ArchiveFlight(SelectedFlightId);
            Flights = await _flightService.GetFlights();
        }
    }

    private async Task ArchiveFlight(int flightId)
    {
        SelectedFlightId = flightId;
        ArchiveConfirmationDialog.Show();
       
    }

    private bool IsAdmin(User user)
    {
        if ((int)user.Role == 1)
            return true;

        else return false;
    }

    private void OpenProfilePage()
    {
        _navigationManager.NavigateTo($"/ProfilePage/{User.Id}");
    }

 }
