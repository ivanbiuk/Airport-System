@page "/AddPassenger/{FlightId}/{UserId}"
@inject PassengerService _passengerService;
@inject NavigationManager _navigationManager;
<h3>AddPassenger</h3>

<EditForm Model="@Passenger" OnValidSubmit="@AddPassengerAsync">
    <PassengerFields Passenger="@Passenger"></PassengerFields>
    <button type="submit" class="btn btn-success">
        <span class="oi oi-pencil"></span>
        Add Passenger
    </button>
    <button type="button" class="btn btn-secondary" @onclick="Close">
        <span class="oi oi-media-skip-backward"></span>
        Close
    </button>
</EditForm>

<NotificationDialog @ref="NotificationDialog" Description="@ConcatenatedValidationErrors" NotificationType="Error"></NotificationDialog>
@code {
    [Parameter]
    public string FlightId { get; set; }
    public Passenger Passenger { get; set; }
    public NotificationDialog NotificationDialog { get; set; }
    public List<ValidationError> ValidationErrors { get; set; }
    public String ConcatenatedValidationErrors { get; set; }
    [Parameter]
    public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Passenger = new Passenger();
        Passenger.FlightId = int.Parse(FlightId);
    }

    private async Task AddPassengerAsync()
    {
        ValidationErrors = ValidatePassenger();
        if (ValidationErrors.Any())
        {
            ConcatenatedValidationErrors = GetConcatenatedValidationErrors(ValidationErrors);
            NotificationDialog.Show();
        }
        else
        {
            await _passengerService.AddPassengerAsync(Passenger);
            Close();
        }
    }

    private void Close()
    {
        _navigationManager.NavigateTo($"/FlightList/{UserId}");
    }

    private List<ValidationError> ValidatePassenger()
    {
        var validationErrors = new List<ValidationError>();
        if (String.IsNullOrWhiteSpace(Passenger.Name))
            validationErrors.Add(new ValidationError { Description = "Please insert Passenger Name!" });

        if (String.IsNullOrWhiteSpace(Passenger.Surname))
            validationErrors.Add(new ValidationError { Description = "Please insert Passenger Surname!" });

        if (String.IsNullOrWhiteSpace(Passenger.Gender))
            validationErrors.Add(new ValidationError { Description = "Please insert Passenger Gender!" });

        if (Passenger.BaggageItems == 0 && Passenger.BaggageWeight != 0)
            validationErrors.Add(new ValidationError { Description = "Baggage weight cannot be different from 0 if number of baggage items is 0" });

        return validationErrors;
    }

    private string GetConcatenatedValidationErrors(List<ValidationError> ValidationErrors)
    {
        StringBuilder message = new StringBuilder();
        foreach (var error in ValidationErrors)
        {
            if (message.Length == 0)
                message.Append(error.Description);
            else
                message.Append($"{Environment.NewLine} {error.Description}");

        }
        return message.ToString();
    }

}
